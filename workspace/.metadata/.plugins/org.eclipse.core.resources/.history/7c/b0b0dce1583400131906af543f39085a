// Assignment #: 7
//         Name: Chris LaVoy
//    StudentID: 1201806935
//      Lecture: MWF 10:30 - 11:20
//  Description: it needs to be filled.

import java.awt.*;

import javax.swing.*;

import java.awt.event.*; // to use listener interfaces
import java.util.ArrayList;

public class WholePanel extends JPanel
{
   private ArrayList circleList;
   private Color currentColor = Color.black;
   private Canvas canvas;
   private JPanel topPanel;
   private JButton undo;
   private JButton erase;
   private JComboBox colorBox;
   
   private int globalX = 0, globalY = 0;
   private int diameter = 0;
   private Color color;

   public WholePanel()
    {
      // here we use black to draw a circle
      currentColor = Color.black;

      circleList = new ArrayList();
      topPanel = new JPanel();
      topPanel.setLayout(new GridLayout(1, 3));

      undo = new JButton("Undo");
      topPanel.add(undo);
      
      erase = new JButton("Erase");
      topPanel.add(erase);
      
      colorBox = new JComboBox();
      colorBox.addItem("black");
      colorBox.addItem("red");
      colorBox.addItem("blue");
      colorBox.addItem("green");
      colorBox.addItem("orange");
      topPanel.add(colorBox);

      canvas = new Canvas();

      JSplitPane sp = new JSplitPane(JSplitPane.VERTICAL_SPLIT, topPanel, canvas);

      setLayout(new BorderLayout());
      add(sp);

      //to be completed
      erase.addActionListener(new ButtonListener());

     }


    private class Canvas extends JPanel
     {
      //This method needs to be defined to draw in this panel
      public void paintComponent(Graphics page)
       {
         super.paintComponent(page);

         setBackground(Color.white);

        //to be filled
         addMouseListener (new PointListener());
         
    	 Circle circle = new Circle(globalX, globalY, diameter, color);
    	 circle.draw(page);
    	 circleList.add(circle);
    	 //repaint();
         
         
         
       }
     } //end of Canvas class

    private class PointListener implements MouseListener, MouseMotionListener
     {
                 public void mousePressed(MouseEvent event)
                  {
                         //needs to be filled)
                	 globalX = event.getX();
                	 globalY = event.getY();
                	 repaint();
                  }
                 public void mouseReleased(MouseEvent event)
                  {
                         //needs to be filled
                  }
                 public void mouseClicked(MouseEvent event) {}
                 public void mouseEntered(MouseEvent event) {}
                 public void mouseExited(MouseEvent event) {}
                 public void mouseDragged(MouseEvent event)
                   {
                        //needs to be filled
                	 diameter = event.getXOnScreen();
                	 repaint();
                   }
                 public void mouseMoved(MouseEvent event) {}

     } //end of PointListener
    
    private class ButtonListener implements ActionListener
    {
		public void actionPerformed(ActionEvent event) 
		{
			if (event.getSource() == erase)
			{
				
			}
			
			if (event.getSource() == undo)
			{
				
			}
		}
    }//end of ButtonListener
    
    private class ColorListener implements ActionListener
    {
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			if (colorBox.getSelectedIndex() == 0)
			{
				currentColor = Color.black;
			}
			
		}
    	
    }
    
    private class Circle
    {
    	private int x;
    	private int y;
    	private int diameter;
    	private Color color;
    	
    	public Circle(int x, int y, int diameter, Color color)
    	{
    		this.x = x;
    		this.y = y;
    		this.diameter = diameter;
    		this.color = color;
    	}
    	
    	public void draw(Graphics page)
    	{
    		page.setColor(currentColor);
    		page.fillOval(x, y, diameter, diameter);
    	}
    }//end of Circle

} // end of Whole Panel Class